!	mappings.vim	/^nnoremap <silent> ! :silent tnext<CR>$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$FZF_DEFAULT_COMMAND	plugins.vim	/^let $FZF_DEFAULT_COMMAND = 'rg --files'$/;"	v
$VIRTUAL_ENV	ftplugin/python.vim	/^	let $VIRTUAL_ENV = fnamemodify('.venv', ':p')$/;"	v
<C-*>	plugins.vim	/^nnoremap <C-*> :call GitGrepSymbol()<CR>$/;"	m
<C-A-down>	mappings.vim	/^inoremap <C-A-down> <Esc>:m+<CR>==gi$/;"	m
<C-A-down>	mappings.vim	/^nnoremap <C-A-down> :m+<CR>==$/;"	m
<C-A-down>	mappings.vim	/^vnoremap <C-A-down> :m'>+<CR>gv=gv$/;"	m
<C-A-up>	mappings.vim	/^inoremap <C-A-up> <Esc>:m-2<CR>==gi$/;"	m
<C-A-up>	mappings.vim	/^nnoremap <C-A-up> :m-2<CR>==$/;"	m
<C-A-up>	mappings.vim	/^vnoremap <C-A-up> :m-2<CR>gv=gv$/;"	m
<C-PageDown>	mappings.vim	/^nnoremap <C-PageDown> :bnext<CR>$/;"	m
<C-PageUp>	mappings.vim	/^nnoremap <C-PageUp> :bprev<CR>$/;"	m
<C-b>	plugins.vim	/^nnoremap <C-b> :Git blame<CR>$/;"	m
<C-d>	mappings.vim	/^inoremap <C-d> <Esc>ddi$/;"	m
<C-d>	mappings.vim	/^nnoremap <C-d> dd$/;"	m
<C-d>	mappings.vim	/^vnoremap <C-d> d$/;"	m
<C-f>	plugins.vim	/^nnoremap <C-f> :call FindDir(input('find in dir: '))<Cr>$/;"	m
<C-g>	plugins.vim	/^nnoremap <C-g> :call GitGrep()<CR>$/;"	m
<C-h>	look_and_feel.vim	/^nnoremap <C-h> :call SynStack()<CR>$/;"	m
<C-l>	mappings.vim	/^nnoremap <C-l> :call InsertLicense()<CR>$/;"	m
<C-p>	plugins.vim	/^nnoremap <C-p> :call FindDir(GitRoot())<Cr>$/;"	m
<Enter>	mappings.vim	/^map <Enter> o<Esc>$/;"	m
<Esc>N	mappings.vim	/^nnoremap <Esc>N :set number!<CR>$/;"	m
<Esc>P	mappings.vim	/^nnoremap <Esc>P :set paste!<CR>$/;"	m
<F12>	look_and_feel.vim	/^nnoremap <F12> :syntax sync fromstart<CR>$/;"	m
<F2>	mappings.vim	/^nnoremap <F2> :call InsertFixes()<CR>$/;"	m
<F4>	mappings.vim	/^nnoremap <F4> :call InsertAckedBy()<CR>$/;"	m
<F5>	mappings.vim	/^map <F5> :set shiftwidth=8<CR>:set tabstop=8<CR>:set noexpandtab<CR>:set softtabstop=8<CR>$/;"	m
<F6>	mappings.vim	/^map <F6> :set shiftwidth=4<CR>:set tabstop=4<CR>:set expandtab<CR>:set softtabstop=4<CR>$/;"	m
<F7>	mappings.vim	/^map <F7> :set shiftwidth=2<CR>:set tabstop=2<CR>:set expandtab<CR>:set softtabstop=2<CR>$/;"	m
<F9>	mappings.vim	/^nnoremap <F9> :set spell!<CR>$/;"	m
<Leader>hlt	<Plug>HiLinkTrace	plugin/hilinks.vim	/^ map <unique> <Leader>hlt	<Plug>HiLinkTrace$/;"	m
<Plug>HiLinkTrace	:sil!	plugin/hilinks.vim	/^map <script> <Plug>HiLinkTrace	:sil! call <SID>HiLinkTrace(0)<CR>$/;"	m
<S-Enter>	mappings.vim	/^map <S-Enter> O<Esc>$/;"	m
<S-tab>	mappings.vim	/^vnoremap <S-tab> <gv$/;"	m
<down>	mappings.vim	/^imap <down> <C-o>gj$/;"	m
<down>	mappings.vim	/^map <down> gj$/;"	m
<s-F10>		<Leader>hlt	plugin/hilinks.vim	/^ map <script> <s-F10>		<Leader>hlt$/;"	m
<tab>	mappings.vim	/^vnoremap <tab> >gv$/;"	m
<up>	mappings.vim	/^imap <up> <C-o>gk$/;"	m
<up>	mappings.vim	/^map <up> gk$/;"	m
CIfDef	syntax/ifdef.vim	/^function! CIfDef()$/;"	f
CIfDef	syntax/ifdef.vim	/^function! s:CIfDef(force)$/;"	f
CheckDirForFile	syntax/ifdef.vim	/^function! s:CheckDirForFile(directory,file)$/;"	f
Define	syntax/ifdef.vim	/^com! -complete=customlist,Find_defines -nargs=1 Define call Define(<q-args>)$/;"	c
Define	syntax/ifdef.vim	/^fun! Define(define)$/;"	f
DoDefines	syntax/ifdef.vim	/^fun! s:DoDefines( define, defines)$/;"	f
E	mappings.vim	/^nnoremap E :call PrevError()<CR>$/;"	m
EnableByDefault	syntax/python.vim	/^function! s:EnableByDefault(name)$/;"	f
Enabled	syntax/python.vim	/^function! s:Enabled(name)$/;"	f
F	mappings.vim	/^nnoremap F gqap$/;"	m
F	mappings.vim	/^vnoremap F gq$/;"	m
FindDir	plugins.vim	/^function FindDir(path)$/;"	f
Find_defines	syntax/ifdef.vim	/^fun! Find_defines(A, L, P)$/;"	f
GetModelines	syntax/ifdef.vim	/^fun! s:GetModelines( l1, l2)$/;"	f
GitGrep	plugins.vim	/^function GitGrep()$/;"	f
GitGrepSymbol	plugins.vim	/^function GitGrepSymbol()$/;"	f
GitRoot	plugins.vim	/^function GitRoot()$/;"	f
HLT	plugin/hilinks.vim	/^com! -bang	HLT					sil! call s:HiLinkTrace(<bang>0)$/;"	c
HLTX	plugin/hilinks.vim	/^com! -bang	HLTX				let s:x256=1|sil! call s:HiLinkTrace(<bang>0)|unlet s:x256$/;"	c
HLTm	plugin/hilinks.vim	/^com!		HLTm				sil! call s:HiLinkTrace(1)$/;"	c
HiLink	syntax/c.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/c.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/jinja.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/jinja.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/make.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/make.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/python.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/python.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLinkTrace	plugin/hilinks.vim	/^fun! <SID>HiLinkTrace(always)$/;"	f
IfdefLoad	syntax/ifdef.vim	/^fun! IfdefLoad()$/;"	f
InitCscope	mappings.vim	/^function InitCscope()$/;"	f
InsertAckedBy	mappings.vim	/^function InsertAckedBy()$/;"	f
InsertFixes	mappings.vim	/^function InsertFixes()$/;"	f
InsertLicense	mappings.vim	/^function InsertLicense()$/;"	f
NextError	mappings.vim	/^function NextError()$/;"	f
PrevError	mappings.vim	/^function PrevError()$/;"	f
Python2Syntax	syntax/python.vim	/^command! -buffer Python2Syntax let b:python_version_2 = 1 | let &syntax=&syntax$/;"	c
Python2Syntax	syntax/python.vim	/^function! s:Python2Syntax()$/;"	f
Python3Syntax	syntax/python.vim	/^command! -buffer Python3Syntax let b:python_version_2 = 0 | let &syntax=&syntax$/;"	c
ReadDefineModeline	syntax/ifdef.vim	/^fun! s:ReadDefineModeline()$/;"	f
ReadFile	syntax/ifdef.vim	/^fun! s:ReadFile( dir, filename)$/;"	f
SID	plugin/hilinks.vim	/^function s:SID()$/;"	f
SynStack	look_and_feel.vim	/^function! SynStack()$/;"	f
Undefine	syntax/ifdef.vim	/^com! -complete=customlist,Find_defines -nargs=1 Undefine call Undefine(<q-args>)$/;"	c
Undefine	syntax/ifdef.vim	/^fun! Undefine(define)$/;"	f
X256matcher	plugin/hilinks.vim	/^fun! s:X256matcher(id)$/;"	f
Y	mappings.vim	/^vnoremap Y <esc>:'<,'>:w !curl -LSsF file=@- https:\/\/0x0.st<CR>$/;"	m
add_syntax	syntax/sql.vim	/^fun! s:add_syntax(s)$/;"	f
append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
b:c_minlines	syntax/c.vim	/^  let b:c_minlines = 15$/;"	v
b:c_minlines	syntax/c.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:current_syntax	syntax/c.vim	/^let b:current_syntax = "c"$/;"	v
b:current_syntax	syntax/docfiles.vim	/^let b:current_syntax = "docfiles"$/;"	v
b:current_syntax	syntax/ifdef.vim	/^  let b:current_syntax = "ifdef"$/;"	v
b:current_syntax	syntax/ifdef.vim	/^  let b:current_syntax = b:current_syntax.'+ifdef'$/;"	v
b:current_syntax	syntax/jinja.vim	/^let b:current_syntax = "jinja"$/;"	v
b:current_syntax	syntax/lark.vim	/^let b:current_syntax = "lark"$/;"	v
b:current_syntax	syntax/mail.vim	/^let b:current_syntax = "mail"$/;"	v
b:current_syntax	syntax/make.vim	/^let b:current_syntax = "make"$/;"	v
b:current_syntax	syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:current_syntax	syntax/python.vim	/^let b:current_syntax = 'python'$/;"	v
b:current_syntax	syntax/sql.vim	/^let b:current_syntax = "sql"$/;"	v
b:current_syntax	syntax/yang.vim	/^let b:current_syntax = "yang"$/;"	v
b:did_indent	indent/nginx.vim	/^let b:did_indent = 1$/;"	v
bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	autoload/plug.vim	/^function! s:bar()$/;"	f
batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
bb	mappings.vim	/^nnoremap bb :bd<CR>$/;"	m
c_C94	look_and_feel.vim	/^let c_C94=1$/;"	v
c_C94	syntax/c.vim	/^  let c_C94 = 1$/;"	v
c_C99	look_and_feel.vim	/^let c_C99=1$/;"	v
c_C99	syntax/c.vim	/^    let c_C99 = 1$/;"	v
c_C99	syntax/c.vim	/^  let c_C99 = 1$/;"	v
c_ansi_constants	look_and_feel.vim	/^let c_ansi_constants=1$/;"	v
c_ansi_typedefs	look_and_feel.vim	/^let c_ansi_typedefs=1$/;"	v
c_char_is_integer	look_and_feel.vim	/^let c_char_is_integer=1$/;"	v
c_conditional_is_operator	look_and_feel.vim	/^let c_conditional_is_operator=1$/;"	v
c_cpp_comments	syntax/c.vim	/^    let c_cpp_comments = 1$/;"	v
c_gnu	look_and_feel.vim	/^let c_gnu=1$/;"	v
c_math	look_and_feel.vim	/^let c_math=1$/;"	v
c_math	syntax/c.vim	/^  let c_math = 1$/;"	v
c_no_if0	syntax/ifdef.vim	/^let c_no_if0=1$/;"	v
c_no_names	syntax/c.vim	/^  let c_no_names = 1$/;"	v
c_no_octal	look_and_feel.vim	/^let c_no_octal=1$/;"	v
c_posix	look_and_feel.vim	/^let c_posix=1$/;"	v
c_posix	syntax/c.vim	/^  let c_posix = 1$/;"	v
c_space_errors	look_and_feel.vim	/^let c_space_errors=1$/;"	v
c_syntax_for_h	look_and_feel.vim	/^let c_syntax_for_h=1$/;"	v
c_warn_digraph	syntax/c.vim	/^  let c_warn_digraph = 1$/;"	v
check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
close_pane	autoload/plug.vim	/^function! s:close_pane()$/;"	f
colors_name	colors/tir_black.vim	/^let colors_name = "tir_black"$/;"	v
compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
did_cpp_syntax_inits	syntax/c.vim	/^    let did_cpp_syntax_inits = 1$/;"	v
did_jinja_syn_inits	syntax/jinja.vim	/^    let did_jinja_syn_inits = 1$/;"	v
did_make_syn_inits	syntax/make.vim	/^    let did_make_syn_inits = 1$/;"	v
did_python_syn_inits	syntax/python.vim	/^        let did_python_syn_inits = 1$/;"	v
diff	autoload/plug.vim	/^function! s:diff()$/;"	f
dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
e	ftplugin/gitrebase.vim	/^nnoremap <buffer> <silent> e :Edit<CR>$/;"	m
e	mappings.vim	/^nnoremap e :call NextError()<CR>$/;"	m
err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
f	ftplugin/gitrebase.vim	/^nnoremap <buffer> <silent> f :Fixup<CR>$/;"	m
find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
g:ale_cache_executable_check_failures	plugins.vim	/^let g:ale_cache_executable_check_failures = 1$/;"	v
g:ale_completion_enabled	plugins.vim	/^let g:ale_completion_enabled = 1$/;"	v
g:ale_linters	plugins.vim	/^let g:ale_linters = { 'python': ['flake8', 'pylint'], 'rust': ['analyzer'], 'javascript': ['eslint'] }$/;"	v
g:ale_linters_explicit	plugins.vim	/^let g:ale_linters_explicit = 1$/;"	v
g:ale_python_pylint_executable	plugins.vim	/^let g:ale_python_pylint_executable = 'pylint-3'$/;"	v
g:ale_set_signs	plugins.vim	/^let g:ale_set_signs = 0$/;"	v
g:ale_use_global_executables	plugins.vim	/^let g:ale_use_global_executables = 0$/;"	v
g:buftabline_indicators	plugins.vim	/^let g:buftabline_indicators = 1$/;"	v
g:buftabline_show	plugins.vim	/^let g:buftabline_show = 1$/;"	v
g:go_def_mapping_enabled	plugins.vim	/^let g:go_def_mapping_enabled = 0$/;"	v
g:hilinks_fmtwidth	plugin/hilinks.vim	/^ let g:hilinks_fmtwidth= 35$/;"	v
g:jedi#goto_command	plugins.vim	/^let g:jedi#goto_command = "<F3>"$/;"	v
g:jedi#show_call_signatures	plugins.vim	/^let g:jedi#show_call_signatures = 2$/;"	v
g:jinja_syntax_html	look_and_feel.vim	/^let g:jinja_syntax_html=0$/;"	v
g:jinja_syntax_html	syntax/jinja.vim	/^   let g:jinja_syntax_html=1$/;"	v
g:loaded_hilinks	plugin/hilinks.vim	/^let g:loaded_hilinks= "v4m"$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
git_dir	autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f
git_local_branch	autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
git_origin_branch	autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
git_origin_url	autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
git_revision	autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f
git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
ifdef_filename	syntax/ifdef.vim	/^    let ifdef_filename='.defines'$/;"	v
ifdef_filename	syntax/ifdef.vim	/^    let ifdef_filename='_defines'$/;"	v
ifdef_loaded	syntax/ifdef.vim	/^  let ifdef_loaded=1$/;"	v
infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
isabsolute	autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
j	mappings.vim	/^map j gj$/;"	m
job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
k	mappings.vim	/^map k gk$/;"	m
last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
main_syntax	syntax/jinja.vim	/^  let main_syntax = 'jinja'$/;"	v
mapleader	mappings.vim	/^let mapleader = ','$/;"	v
names	autoload/plug.vim	/^function! s:names(...)$/;"	f
new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
python_highlight_all	look_and_feel.vim	/^let python_highlight_all=1$/;"	v
python_highlight_space_errors	look_and_feel.vim	/^let python_highlight_space_errors=0$/;"	v
r	ftplugin/gitrebase.vim	/^nnoremap <buffer> <silent> r :Reword<CR>$/;"	m
reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
retry	autoload/plug.vim	/^function! s:retry()$/;"	f
revert	autoload/plug.vim	/^function! s:revert()$/;"	f
rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s	ftplugin/gitrebase.vim	/^nnoremap <buffer> <silent> s :Squash<CR>$/;"	m
s:HLTmode	plugin/hilinks.vim	/^let s:HLTmode       = 0$/;"	v
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/mail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/make.vim	/^let s:cpo_save = &cpo$/;"	v
s:exs_re	syntax/python.vim	/^        let s:exs_re .= '|BlockingIOError|ChildProcessError|ConnectionError|BrokenPipeError|ConnectionAbortedError|ConnectionRefusedError|ConnectionResetError|FileExistsError|FileNotFoundError|InterruptedError|IsADirectoryError|NotADirectoryError|PermissionError|ProcessLookupError|TimeoutError|StopAsyncIteration|ResourceWarning'$/;"	v
s:exs_re	syntax/python.vim	/^        let s:exs_re .= '|StandardError'$/;"	v
s:exs_re	syntax/python.vim	/^    let s:exs_re = 'BaseException|Exception|ArithmeticError|LookupError|EnvironmentError|AssertionError|AttributeError|BufferError|EOFError|FloatingPointError|GeneratorExit|IOError|ImportError|IndexError|KeyError|KeyboardInterrupt|MemoryError|NameError|NotImplementedError|OSError|OverflowError|ReferenceError|RuntimeError|StopIteration|SyntaxError|IndentationError|TabError|SystemError|SystemExit|TypeError|UnboundLocalError|UnicodeError|UnicodeEncodeError|UnicodeDecodeError|UnicodeTranslateError|ValueError|VMSError|WindowsError|ZeroDivisionError|Warning|UserWarning|BytesWarning|DeprecationWarning|PendingDeprecationWarning|SyntaxWarning|RuntimeWarning|FutureWarning|ImportWarning|UnicodeWarning'$/;"	v
s:first_rtp	autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:funcs_re	syntax/python.vim	/^            let s:funcs_re .= '|print'$/;"	v
s:funcs_re	syntax/python.vim	/^        let s:funcs_re .= '\\=@!'$/;"	v
s:funcs_re	syntax/python.vim	/^        let s:funcs_re .= '|apply|basestring|buffer|cmp|coerce|execfile|file|intern|long|raw_input|reduce|reload|unichr|unicode|xrange'$/;"	v
s:funcs_re	syntax/python.vim	/^        let s:funcs_re .= '|ascii|breakpoint|exec|print'$/;"	v
s:funcs_re	syntax/python.vim	/^    let s:funcs_re = '__import__|abs|all|any|bin|callable|chr|classmethod|compile|complex|delattr|dir|divmod|enumerate|eval|filter|format|getattr|globals|hasattr|hash|help|hex|id|input|isinstance|issubclass|iter|len|locals|map|max|memoryview|min|next|oct|open|ord|pow|property|range|repr|reversed|round|setattr|slice|sorted|staticmethod|sum|super|type|vars|zip'$/;"	v
s:funcs_re	syntax/python.vim	/^    let s:funcs_re = 'syn match pythonBuiltinFunc ''\\v\\.@<!\\zs<%(' . s:funcs_re . ')>'$/;"	v
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:keepcpo	plugin/hilinks.vim	/^let s:keepcpo= &cpo$/;"	v
s:last_rtp	autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
status	autoload/plug.vim	/^function! s:status()$/;"	f
status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
tick	autoload/plug.vim	/^function! s:tick()$/;"	f
to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
ù	mappings.vim	/^nnoremap <silent> ù <C-]>$/;"	m
